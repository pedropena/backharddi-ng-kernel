# This is completely meaningless, since the mini-ISO uses prebuilt
# boot images, but some Makefile magic depends on those definitions.
KERNELVERSION = $(KERNELMAJOR).$(KERNELMINOR)-r4k-ip22
KERNELNAME =
KERNELMAJOR = 2.6

MEDIA_TYPE = CD-ROM

# Hack, hack!
TARGET = 
EXTRATARGETS = build_r4k-ip22_netboot-2.6 $(MINIISO)
EXTRANAME = cdrom-

MANIFEST-MINIISO = "tiny bootable CD image for pure network install"

.PHONY: arch_miniiso
arch_miniiso:
	-rm -rf $(TEMP_CD_TREE)/*
	install -m 644 -D $(BASE_TMP)r4k-ip22_netboot-2.6/boot.img $(TEMP_CD_TREE)/install/r4k-ip22-boot.img
	mkisofs -r -J -o $(TEMP_MINIISO) $(TEMP_CD_TREE)
	set -e; \
	ISOVH_BOOTFILES= ; \
	$(foreach SUB,r4k-ip22 , \
		start=$$(isoinfo -i $(TEMP_MINIISO) -lsR |grep -A 10 'Directory listing of /install' |grep $(SUB)-boot.img |awk '{print $$10 * 4}'); \
		size=$$(isoinfo -i $(TEMP_MINIISO) -lsR |grep -A 10 'Directory listing of /install' |grep $(SUB)-boot.img |awk '{print $$5 * 2048}'); \
		ISOVH_BOOTFILES="$$ISOVH_BOOTFILES $(SUB):$$start,$$size";) \
	start=$$(isoinfo -i $(TEMP_MINIISO) -lsR |grep -A 10 'Directory listing of /install' |grep r4k-ip22-boot.img |awk '{print $$10 * 4}'); \
	size=$$(isoinfo -i $(TEMP_MINIISO) -lsR | grep -A 10 'Directory listing of /install' |grep r4k-ip22-boot.img |awk '{print $$5 * 2048}'); \
	ISOVH_BOOTFILES="$$ISOVH_BOOTFILES sashARCS:$$start,$$size"; \
	genisovh $(TEMP_MINIISO) $$ISOVH_BOOTFILES
