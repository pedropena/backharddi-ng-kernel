#!/bin/sh -e

. /lib/backharddi/definitions.sh

OLD_STDIN="$DEBCONF_OLD_FD_BASE"
PARTIMAGE_STATS=/var/log/partimage/partimage.stats
NTFSCLONE_STATS=/var/log/ntfsclone.stats
PARTCLONE_STATS=/var/log/partclone.stats
DD_STATS=/var/log/dd.stats
STOP_MONITOR=/tmp/stop_monitor
ERROR=/tmp/backharddi_error
CDNUM=/tmp/cdnum

error(){
	touch $STOP_MONITOR $ERROR
}

parse_stats(){
	if [ -f $imagenes/$id/ntfsclone ]; then
        stat="$(grep stats: $NTFSCLONE_STATS | tail -n 1)"
		case "$stat" in 
			stats:*)
				percent="$(echo "$stat" | cut -b 8-10)"
			;;
			*) 
				percent=0
			;;
		esac
		etime="No disponible"
		rtime="No disponible"
		rate="No disponible"
	elif [ -f $imagenes/$id/partclone ]; then
		stat="$(grep ^stats:.*Rate $PARTCLONE_STATS | tail -n 1)"
		case "$stat" in
			stats:*)
				percent="$(echo "$stat" | cut -b 18-20)"
				etime="$(echo "$stat" | cut -b 56-63)"
				rtime="$(echo "$stat" | cut -b 77-84)"
				rate="$(echo "$stat" | cut -b 32-44)"
			;;
			*) 
				percent=0
				etime="0:00"
				rtime="0:00"
				rate="0 GB/min"
			;;
		esac
	elif [ -f $imagenes/$id/dd ]; then
		percent=0
		etime="0:00"
		rtime="0:00"
		rate="0 GB/min"
	else
        stat="$(grep stats: $PARTIMAGE_STATS | tail -n 1)"
		case "$stat" in 
			stats:*)
				percent="$(echo "$stat" | cut -b 8-10)"
				etime="$(echo "$stat" | cut -b 13-20)"
				rtime="$(echo "$stat" | cut -b 22-29)"
				rate="$(echo "$stat" | cut -b 31-39)"
			;;
			*) 
				percent=0
				etime="0:00"
				rtime="0:00"
				rate="0 GB/min"
			;;
		esac
	fi
	echo $percent,$etime,$rtime,$rate
}
	
monitor(){
	progress_start=false
	percent=0
	case $accion in
		rest)
			basemsg="Restaurando copia de seguridad de"
		;;
		gen)
			basemsg="Generando copia de seguridad de"
		;;
	esac
    while [ "$percent" -lt 100 ]; do
		if [ -f $STOP_MONITOR ]; then
			db_progress STOP
			rm $STOP_MONITOR
			return 0
		fi
        sleep 3
        retval=$(parse_stats)
        percent=$(echo $retval | cut -d ',' -f 1)
        etime=$(echo $retval | cut -d ',' -f 2)
        rtime=$(echo $retval | cut -d ',' -f 3)
        rate=$(echo $retval | cut -d ',' -f 4)
		[ "$accion" = rest ] || free="$(df -h /target | tail -n 1 | sed "s/\ \{1,\}/\ /g" | cut -d " " -f 4)"
        if [ "$progress_start" = false ]; then
			db_progress START 0 100 debian-installer/backharddi-udeb/title
		    db_subst backharddi/progress/$accion device $(humandev $(cat $id/path))
		    msg="$basemsg $(humandev $(cat $id/path))"
			progress_start=true
		fi
		db_subst backharddi/progress/$accion rate "$rate"
		db_subst backharddi/progress/$accion etime "$etime"
		db_subst backharddi/progress/$accion rtime "$rtime"
		[ "$accion" = rest ] || db_subst backharddi/progress/$accion free "$free"
		db_progress INFO backharddi/progress/$accion
		if [ "$medio" = net ]; then			
			sendstatus_to_server "$server" "$service_port" "Conectado" "${percent}" "$msg"
		fi
    db_progress SET "$percent"
    done
    db_progress SET 100
	db_progress STOP
	[ -f $STOP_MONITOR ] && rm $STOP_MONITOR
}

comprime(){
	if [ -f $id/compresion ]; then 
		case "$(cat $id/compresion)" in
			lzo) lzop -1 -c - ;;
			lzma) lzma -z -c ;;
			*) cat ;;
		esac	
	else
		cat 
	fi
}

descomprime(){
	if [ -f $imagenes/$id/compresion ]; then 
		case "$(cat $imagenes/$id/compresion)" in
			lzo) lzop -d -c - ;;
			lzma) lzma -d -c ;;
			gzip) zcat ;;
		esac	
	else
		cat
	fi
}

concatena2(){
	for i in $imagenes/$id/img.*; do
		cat $i || exit 1
	done
}

concatena(){
	case "$medio" in
		net)
			db_get backharddi/net/port
			port="$RET"
			if [ -n "$port" ]; then
				monitor | udp-receiver --nokbd --stat-period 2000 --portbase "$port" 2>>/var/log/udp-receiver
				wait
			else
				port="$(wget -q -O - http://$server:$service_port/get?backup=$(echo $imagenes/$id | escape_string))"
				monitor | udp-receiver --stat-period 2000 --portbase "$port" <&$OLD_STDIN 2>>/var/log/udp-receiver
				wait
			fi
		;;
		hd-media)
			monitor | concatena2 
			wait
		;;
		cdrom)
			CDDEV=$(mount | grep "on /target" | cut -d ' ' -f 1)
			[ -f $CDNUM ] && num=$(cat $CDNUM) || { num=1; echo 1 > $CDNUM; }
			for i in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99; do
				cambio=false
				while [ ! -f $imagenes/$id/img.$i ]; do
					echo "Buscando $imagenes/$id/img.$i, desmontando" >&2
					while mount | grep "on /target" >/dev/null; do
						echo "1" > /proc/sys/dev/cdrom/autoeject
						umount /target || true
						echo "0" > /proc/sys/dev/cdrom/autoeject
					done
					db_subst backharddi/cdrom/siguiente numero "$num"
					db_input critical backharddi/cdrom/siguiente || true
					db_go || true
					echo "1" > /proc/sys/dev/cdrom/autoclose
					mount $CDDEV /target -o ro -t iso9660 || continue
					echo "0" > /proc/sys/dev/cdrom/autoclose
					cambio=true
				done
				[ "$cambio" = true -o "$num" -eq 1 ] && num=$((num + 1)) && echo $num > $CDNUM
				[ "$(cat $imagenes/$id/img)" = "$(basename $imagenes/$id/img).$i" ] && ultimo_fichero=true
				monitor | { cat $imagenes/$id/img.$i; [ "x$ultimo_fichero" = xtrue ] || touch $STOP_MONITOR; }
				wait
				[ "$ultimo_fichero" = true ] && break
			done
		;;
	esac
}

gen_cmd(){
	if [ -f $id/ntfsclone ]; then
		ntfsclone -s -o - $(cat $id/path) 2>$NTFSCLONE_STATS || error
	elif [ -f $id/partclone ]; then
		partclone.ext4 -C -c -s $(cat $id/path) 2>$PARTCLONE_STATS || error
	elif [ -f $id/dd ]; then
		map=${id#*/}
		start=${map%-*}
		end=${map#*-}
		size=$((end-start+1))
		dd_rescue $(cat $id/path) - -m $size 2>$DD_STATS && touch $STOP_MONITOR || error
	else
		partimage -B gui=no -M -V0 -dc -z0 -f3 save $(cat $id/path) stdout 2>$PARTIMAGE_STATS || error
	fi
}

rest_cmd(){
	if [ -f $imagenes/$id/ntfsclone ]; then
		ntfsclone -r -O $(cat $id/path) - 2>$NTFSCLONE_STATS >&2 || error
	elif [ -f $imagenes/$id/partclone ]; then
		partclone.ext4 -r -s - -o $(cat $id/path) 2>$PARTCLONE_STATS || error
	elif [ -f $imagenes/$id/dd ]; then
		map=${id#*/}
		start=${map%-*}
		end=${map#*-}
		size=$((end-start+1))
		dd_rescue - $(cat $id/path) -m $size 2>$DD_STATS && touch $STOP_MONITOR || error
	else
		partimage -B gui=no -f3 restore $(cat $id/path) stdin 2>$PARTIMAGE_STATS || error
	fi
}

db_get backharddi/imagenes
imagenes="$RET"
cd $DEVICES

db_get backharddi/medio
medio="$RET"

case "$medio" in
	net)
		db_get backharddi/net/server
		server="$RET"
		db_get backharddi/net/service_port
		service_port="$RET"
		if [ x"$service_port" = x ]; then
			service_port=4600
		fi
	;;
esac

[ -f $CDNUM ] && rm $CDNUM
[ -f $STOP_MONITOR ] && rm $STOP_MONITOR
[ -f $ERROR ] && rm $ERROR

if [ -f cmosgen ]; then
	[ -d $imagenes ] || mkdir -p $imagenes
	cmospwd /d /w $imagenes/cmosdump
fi

[ -f cmosrest -a -f $imagenes/cmosdump ] && echo 2 | cmospwd /d /r $imagenes/cmosdump || true

success_gen=false
for dev in *; do
	[ -d $dev ] || continue
	for id in $dev/*; do
		[ -d $id ] || continue
		[ -f $PARTIMAGE_STATS ] && rm $PARTIMAGE_STATS
		[ -f $PARTCLONE_STATS ] && rm $PARTCLONE_STATS
		[ -f $NTFSCLONE_STATS ] && rm $NTFSCLONE_STATS
		[ -f $DD_STATS ] && rm $DD_STATS
		if [ -f $id/gen ]; then
			accion=gen
			if [ ! -d $imagenes/$dev ]; then
				mkdir -p $imagenes
				cp -r $dev $imagenes
				cat /proc/cmdline > $imagenes/cmdline
			else
				rm $imagenes/$id -rf
				cp -r $id $imagenes/$dev
			fi
			rm $imagenes/$id/gen
			touch $imagenes/$id/img
			case  "$(cat $id/detected_filesystem)" in
				linux-swap)
					dd if=$(cat $id/path) of=$imagenes/$id/img.00 count=8
					[ "$medio" = net ] && success_gen=true || true
				;;
				*) 
					case "$medio" in
						net)
							port="$(wget -q -O - http://$server:$service_port/put?file=$(echo $imagenes/$id/img | escape_string))"
							monitor | gen_cmd | comprime | nc $server $port
							success_gen=true
						;;
						hd-media)
							monitor | gen_cmd | comprime | split  -b 680m -d - $imagenes/$id/img.
						;;
					esac				
				   	wait
				   	[ ! -f $ERROR ]
				;;
			esac
		elif [ -f $id/rest ]; then
			[ -f $dev/sti -o ! -f $imagenes/$dev/mbr ] || cat $imagenes/$dev/mbr > $(cat $dev/device)
			accion=rest
			[ -b $(cat $id/path) ]
			case  "$(cat $imagenes/$id/detected_filesystem)" in
				linux-swap)
					if [ -f $imagenes/$id/img.00 ]; then
						dd if=$imagenes/$id/img.00 of=$(cat $id/path)
					else
						mkswap $(cat $id/path)
					fi
				;;
				*) concatena | descomprime | rest_cmd 
				   wait
				   [ ! -f $ERROR ]
				;;
			esac
		fi
	done
done

if [ "$success_gen" = true ]; then
	port="$(wget -q -O - http://$server:$service_port/putBackupMetadata)"
	pack_backup_metadata $imagenes | nc $server $port
fi
